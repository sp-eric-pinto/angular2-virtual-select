{"version":3,"sources":["../src/sh-select-menu.component.ts"],"names":[],"mappings":";;AAAA,sCAAqH;AACrH,mDAAwD;AAExD;IAAA;QAGK,kBAAa,GAAqB,IAAI,mBAAY,EAAO,CAAC;QAE3D,SAAI,GAAO,IAAI,CAAC;IA+EpB,CAAC;IA7EI,sBAAI,uCAAI;aAAR,UAAS,GAAS;YACf,EAAE,CAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAA,CAAC;gBACtB,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;YACnD,CAAC;YAED,IAAI,CAAC,KAAK,GAAG,GAAG,CAAC;YAEjB,EAAE,CAAA,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACvB,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,CAAC;YACpC,CAAC;QACL,CAAC;;;OAAA;IAAA,CAAC;IAEF,8CAAc,GAAd,UAAe,GAAG;QACd,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IACjC,CAAC;IA+DL,4BAAC;AAAD,CApFA,AAoFC;AA7DM,gCAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,gBAAgB;gBAC1B,eAAe,EAAE,8BAAuB,CAAC,MAAM;gBAC/C,QAAQ,EAAG,woBAaA;gBACX,MAAM,EAAC,CAAC,4lBA8BV,CAAC;aACF,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,oCAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,oCAAc,GAA2C;IAChE,gBAAgB,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;IACpC,QAAQ,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;IAC5B,eAAe,EAAE,CAAC,EAAE,IAAI,EAAE,aAAM,EAAE,EAAE;IACpC,kBAAkB,EAAE,CAAC,EAAE,IAAI,EAAE,gBAAS,EAAE,IAAI,EAAE,CAAC,uCAAsB,EAAG,EAAE,EAAE;IAC5E,MAAM,EAAE,CAAC,EAAE,IAAI,EAAE,YAAK,EAAE,EAAE;CACzB,CAAC;AAnFW,sDAAqB","file":"sh-select-menu.component.js","sourceRoot":"","sourcesContent":["import {Component, Input, Output, EventEmitter, ViewChild, ElementRef, ChangeDetectionStrategy} from \"@angular/core\";\nimport {VirtualScrollComponent} from \"./virtual-scroll\";\n\nexport class ShSelectMenuComponent{\n     selectedValues:any[];\n     isOpen:boolean;\n     noToggleClick:EventEmitter<any> = new EventEmitter<any>();\n     virtualScrollElm:VirtualScrollComponent;\n    math:any = Math;\n    _rows:any[];\n     set rows(val:any[]){\n        if(this.virtualScrollElm){\n            this.virtualScrollElm.scrollInto(this._rows[0])\n        }\n\n        this._rows = val;\n\n        if(this.virtualScrollElm) {\n            this.virtualScrollElm.refresh();\n        }\n    };\n\n    toggleSelected(row){\n        this.noToggleClick.emit(row);\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'sh-select-menu',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template:  `\n        <div class=\"menu\" *ngIf=\"isOpen && _rows\" style=\"min-height: 35px;background-color: white\">\n          <!--virtual-->\n          <virtual-scroll [items]=\"_rows\" (update)=\"viewPortItems = $event\"\n            [style.height]=\"math.min(290,38 * _rows.length) + 'px'\"\n            style=\"display: block\">         \n            <div class=\"item\"\n                 *ngFor=\"let row of viewPortItems\"\n                 [class.selected]=\"selectedValues?.indexOf(row) !== -1\"\n                 (click)=\"toggleSelected(row)\">\n              {{row.name || row}}\n            </div>\n          </virtual-scroll>\n        </div>`,\n    styles:[`.menu{\n  margin: 0;\n  padding: 0;\n  position: absolute;\n  background-color: white;\n  width: 100%;\n  max-height: 300px;\n  overflow: auto;\n  box-sizing: border-box;\n  z-index: 999;\n  box-shadow: 0 2px 3px 0 rgba(34,36,38,.15);\n  border-bottom: 1px solid rgba(34,36,38,.15);\n  border-left: 1px solid rgba(34,36,38,.15);\n  border-right: 1px solid rgba(34,36,38,.15);\n  border-radius: 0 0 2px 2px;\n  min-width: max-content;\n}\n\n.item{\n  padding: 4px;\n  cursor: pointer;\n  white-space: nowrap;\n}\n.item:hover{\n  background-color: #efefef;\n}\n\n\n.item.selected{\n  font-weight: 900;\n}`]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'selectedValues': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'noToggleClick': [{ type: Output },],\n'virtualScrollElm': [{ type: ViewChild, args: [VirtualScrollComponent, ] },],\n'rows': [{ type: Input },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}